# Aliases ls to always color directories.
alias ls='ls --color=auto'

# Short-form for Docker Compose. Overwrites built-in dc command.
alias dc='docker compose'

# git utility aliases.
alias g='git'
alias ga='git add'
alias gb='git branch'
alias gc='git commit'
alias gca='git add . && git commit -a'
alias gch='git checkout'
alias gchm='git checkout $(git_main_branch)'
alias gpl='git pull'
alias gplom='git pull origin $(git_main_branch)'
alias glg='git log'
alias gps='git push'
alias gpsu='git push -u origin $(git_current_branch)'
alias grh='git reset --hard origin/$(git_current_branch)'
alias gs='git -c color.ui=always status -sb | $HOME/util-scripts/sort-git-status.py'
alias gsh='git stash'

# Aliases for git management of dotfiles.
alias dotfiles='git --git-dir="$HOME/dotfiles" --work-tree="$HOME"'
alias dotfiles-ls='dotfiles ls-tree main -r --name-only'

# Enters Python virtual environment in provided path.
venv() {
    venv_path="venv/bin/activate"
    if [ ${#} -eq 0 ]
    then
        source ${venv_path}
    else
        target_dir="${1}"
        previous_dir=$(pwd)
        cd ${target_dir} && source ${venv_path}
        cd ${previous_dir}
    fi
}

# Auto-detects Node version on directory change.
enter_directory() {
    if [[ ${PWD} == ${PREV_PWD} ]]; then
        return
    fi

    if [[ "${PWD}" =~ "${PREV_PWD}" && ! -f ".nvmrc" ]]; then
        return
    fi

    PREV_PWD=${PWD}
    if [[ -f ".nvmrc" ]]; then
        nvm use
        NVM_DIRTY=true
    elif [[ ${NVM_DIRTY} = true ]]; then
        nvm use default
        NVM_DIRTY=false
    fi
}
export PROMPT_COMMAND=enter_directory

# Echoes main/master branch depending on repo.
git_main_branch() {
    command git rev-parse --git-dir &>/dev/null || return
    local ref
    for ref in refs/{heads,remotes/{origin,upstream}}/{main,trunk}; do
        if command git show-ref -q --verify $ref; then
            echo ${ref:t}
            return
        fi
    done
    echo master
}

# Echoes the current git branch.
git_current_branch() {
    local ref
    ref=$(__git_prompt_git symbolic-ref --quiet HEAD 2> /dev/null)
    local ret=$?
    if [[ $ret != 0 ]]; then
        [[ $ret == 128 ]] && return  # no git repo.
        ref=$(__git_prompt_git rev-parse --short HEAD 2> /dev/null) || return
    fi
    echo ${ref#refs/heads/}
}
__git_prompt_git() {
  GIT_OPTIONAL_LOCKS=0 command git "$@"
}
